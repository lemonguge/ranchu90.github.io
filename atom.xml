<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cd's blog]]></title>
  <link href="http://ranchu90.github.io/atom.xml" rel="self"/>
  <link href="http://ranchu90.github.io/"/>
  <updated>2016-04-17T23:43:24+08:00</updated>
  <id>http://ranchu90.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Objective-C复习笔记]]></title>
    <link href="http://ranchu90.github.io/14632363806380.html"/>
    <updated>2016-05-14T22:33:00+08:00</updated>
    <id>http://ranchu90.github.io/14632363806380.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Objective-C简介</h2>

<p>Objective-C简称Objc或者OC，是一种基于C语言的面向对象程序设计语言。1980年代产生，主要在苹果电脑平台上使用，开发Cocoa或Cocoa Touch应用程序。<br/>
通过LLVM编译器架构，可以苹果家最新的编程语言Swift进行双向操作。不过终有一天将会被Swift取代。</p>

<h3 id="toc_1">开发方式</h3>

<h4 id="toc_2">命令行</h4>

<p>clang -fobj-arc *.m<br/>
-fobj-arc表示支持ARC内存管理<br/>
适合研究、调试、学习</p>

<h4 id="toc_3">IDE</h4>

<p>通过Xcode构建正规工程项目<br/>
有利于构建高质量的代码组织</p>

<h2 id="toc_4">类与对象</h2>

<p>在OC中所有的类都是引用类型，所有c语言中的基本数值类型都是值类型。此外，详细的类型说明如下表所示：</p>

<table>
<thead>
<tr>
<th>引用类型(reference)</th>
<th>值类型(value type)</th>
<th>类型装饰</th>
</tr>
</thead>

<tbody>
<tr>
<td>类 class</td>
<td>基础数值类型</td>
<td>协议 protocol</td>
</tr>
<tr>
<td>指针 pointer</td>
<td>结构 struct</td>
<td>类别 category</td>
</tr>
<tr>
<td>快 block</td>
<td>枚举 enum</td>
<td>扩展 extension</td>
</tr>
</tbody>
</table>

<h3 id="toc_5">类与结构体的区别</h3>

<table>
<thead>
<tr>
<th></th>
<th>类 class</th>
<th>结构 struct</th>
</tr>
</thead>

<tbody>
<tr>
<td>实例</td>
<td>对象</td>
<td>值</td>
</tr>
<tr>
<td>类型</td>
<td>引用类型(栈：指针，堆：实体对象)</td>
<td>实例直接存在在栈中</td>
</tr>
</tbody>
</table>

<h3 id="toc_6">栈和堆的区别</h3>

<table>
<thead>
<tr>
<th></th>
<th>栈 stack</th>
<th>堆 heap</th>
</tr>
</thead>

<tbody>
<tr>
<td>存储类容</td>
<td>值类型</td>
<td>引用类型的对象</td>
</tr>
<tr>
<td>管理方式</td>
<td>由系统自动管理，函数为单位</td>
<td>分配由程序员手动请求</td>
</tr>
<tr>
<td>具体</td>
<td>空间大小编译时确定(参数+全局变量)</td>
<td>释放由运行时ARC机制自动释放(确定是)</td>
</tr>
<tr>
<td>具体</td>
<td>函数执行时，系统自动分配stack</td>
<td></td>
</tr>
<tr>
<td>具体</td>
<td>函数结束后，系统立即自动回收stack</td>
<td></td>
</tr>
<tr>
<td>传递方式</td>
<td>函数间直接通过拷贝值传递</td>
<td>函数间通过拷贝引用(指针)传递</td>
</tr>
<tr>
<td>限制</td>
<td>有局部性，大小有限额，超出stack overflow</td>
<td>有全局性，无大小限制(受制系统内存大小)</td>
</tr>
</tbody>
</table>

<h2 id="toc_7">属性与实例变量</h2>

<p>数据成员描述对象的状态：1.实例变量instance variable。2.属性property。</p>

<h3 id="toc_8">属性</h3>

<p>属性描述的是对象的状态，是对外的接口(相当于是public)。<br/>
声明一个属性的同时，编译器会自动为这个属性生成：<br/>
1.getter访问器方法: properyName<br/>
2.setter访问器方法: setProperyName<br/>
3.一个对应的实例变量: _propery</p>

<p>访问器方法可以自定义。访问器方法名也可以修改。对应的实例变量名也可以修改。但是一般使用编译器默认生成的，以便统一规范。</p>

<p>使用静态全局变量(c语言)+类方法，可以模拟类属性。</p>

<h3 id="toc_9">实例变量</h3>

<p>可在不声明属性的情况下定义实例变量。只有实例变量，无类变量。<br/>
若单独自定义了访问器方法，则编译器就不在合成实例变量。<br/>
类外使用属性来访问，类内一般也是用属性访问即self.<br/>
以下情况例外：<br/>
初始化器 init<br/>
析构器 dealloc<br/>
自定义访问器方法中</p>

<p>生存周期<br/>
实例变量存储在堆上。<br/>
值类型实例变量内嵌在对象实例中，随着对象实例释放。<br/>
引用类型的实例变量通过指针引用堆上的实例，ARC对引用进行计数管理，自动施放。</p>

<p>属性的描述特性<br/>
Attribute可指定属性的不同功能。</p>

<p>读写： readwrite(默认)，readonly<br/>
多线程： atomic(默认)， nonatomic</p>

<p>内存管理特性<br/>
ARC下：<br/>
strong(默认), weak(阻止循环引用), copy(创建独立拷贝)<br/>
MRC下：<br/>
retain<br/>
assign<br/>
unsafe_unretained</p>

<h2 id="toc_10">方法</h2>

<p>函数成员描述对象的行为：1.方法method。2.初始化器init。3.析构器dealloc。</p>

<p>函数指的是代码段上可执行指令序列，OC中称为方法。<br/>
所有的方法默认都是公有的，没有private和protected。<br/>
方法调用通过运行时动态消息分发实现，OC中称为向对象发送消息。</p>

<h3 id="toc_11">方法的类型</h3>

<p>实例方法，可访问：<br/>
实例成员。<br/>
类型方法、静态变量。</p>

<p>类方法<br/>
可访问：类型方法、静态变量<br/>
无法访问实例成员。</p>

<h3 id="toc_12">方法的参数</h3>

<p>参数为值类型，则为值传递方式；为引用类型，则为指针传递；<br/>
方法可以无参数和返回值。</p>

<h2 id="toc_13">初始化器和析构器</h2>

<p>初始化器用于初始化对象实例或类型：<br/>
对象初始化：-(id) init 可以重载多个<br/>
alloc：1.在堆上分配合适大小内存。2.将属性或实例变量的内存置0。<br/>
init：1.调用父类初始化器[super init]。2.初始化当前对象实例变量。<br/>
new相当于alloc/init的无参数版本。<br/>
类型初始化：+(void) initialize 只能一个<br/>
负责类型级别初始化。<br/>
每个类使用前被系统自动调用，每个进程周期只调用一次。<br/>
子类调用父类的initialize方法。</p>

<p>析构器用于释放对象的资源，无返回值。<br/>
只能一个。<br/>
无类型析构器。</p>

<p>自动：ARC将对象属性引用计数减持。<br/>
手动：1.释放不受ARC管理的动态内存，如malloc。<br/>
     2.关闭非内存资源，如文件句柄，网络资源。</p>

<p>dealloc由ARC自动在释放对象内存前调用，无法手工调用。<br/>
子类dealloc会自动调用父类的dealloc(后置调用)。</p>

<h2 id="toc_14">继承与多态</h2>

<p>继承的含义：<br/>
成员复用：子类复用父类成员<br/>
类型抽象：将子类当做父类使用(IS-A关系准则)</p>

<p>多态：<br/>
子类在父类统一行为接口下，表现不同的实现方式。</p>

<p>OC不支持重载，子类只能重写与父类同名同参数方法。</p>

<p>子类中通过super调用父类实现。<br/>
self具有多态性，可以指向不同的子类。<br/>
super无多态性，仅指向当前父类。</p>

<h3 id="toc_15">init和dealloc的继承</h3>

<p>init：<br/>
子类自动继承父类的初始化器。<br/>
子类也可以重写父类的初始化器，此时子类初始化器必须先调用父类的一个初始化器。</p>

<p>dealloc：<br/>
子类可以选择继承父类析构器或者重写父类析构器。<br/>
子类析构器执行完后会自动调用父类的析构器（后置调用，且不支持手工调用）。<br/>
子类析构器自动具有多态性。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[困惑]]></title>
    <link href="http://ranchu90.github.io/14615046972424.html"/>
    <updated>2016-04-24T21:31:37+08:00</updated>
    <id>http://ranchu90.github.io/14615046972424.html</id>
    <content type="html"><![CDATA[
<p>最近这段时间在考虑以后工作的问题，非常困惑，是去企业，还是事业单位。<br/>
考量的因素如下：<br/>
1）工作量<br/>
2）稳定性<br/>
3）时间<br/>
去企业工作无意工作量很大，不稳定，而且即使时间过去十年还是需要不停地学习新的东西。<br/>
事业单位或公务员这类工作，一般不加班，稳定，资历很重要。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的协议]]></title>
    <link href="http://ranchu90.github.io/14609059782704.html"/>
    <updated>2016-04-17T23:12:58+08:00</updated>
    <id>http://ranchu90.github.io/14609059782704.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一.问题的产生</h2>

<p><img src="media/14609059782704/14609061125330.jpg" alt=""/><br/>
NetworkConnector类提供所有和网络服务器的交互，包括连接、断开连接和手法数据。BusinessLogic类会接收NetworkConnector收到的数据，并确定它的走向。<br/>
网络连接是一个在其他应用或同一个应用的其他地方一定会复用的东西。所以必须将它与BusinessLogic类设计成没有紧密耦合。<br/>
<img src="media/14609059782704/14609063607549.jpg" alt=""/><br/>
C++等语言使用多继承来解决这类问题，强制BusinessLogic类继承自NetworkConnector可以依赖的类。但是多继承会产生新的问题，即砖石问题。如果D类同时继承自B类和C类，同时B、C也继承自共同的超类A，这种情况下，如果D没有重写A中的方法，当D调用A类的方法的时候，无法确定会调用哪一个父类的方法B类的还是C类的？<br/>
Objective-C只能使用单继承。 </p>

<h2 id="toc_1">二.Objective-C的解决方案</h2>

<p>Objective-C使用协议来声明一个接口来解决这个问题。<br/>
接口是在不提供默认实现时由一个类来具体实现，它只提供声明这些方法的接口机制，让可复用组件不依赖于特定的类来实现，而依赖于以协议形式存在的接口。</p>

<h3 id="toc_2">协议的声明</h3>

<pre><code>@protocol NetworkClient
@required
-(void) networkConnector:(NetworkConnector *) in gotData:(NSData *) data;
@optional
-(void) networkConnectorDisconnected:(NetworkConnector *) in;
@end

</code></pre>

<p>@required关键字表明其后的方法是该协议必须实现的方法。<br/>
@optional关键字表明其后的方法是实现类可以选择性实现的方法。<br/>
同时，协议不能有成员变量。</p>

<h3 id="toc_3">声明一个必须实现协议的对象</h3>

<pre><code>id&lt;NerworkClient&gt; *delegate; //&lt;&gt;中是该对象必须实现的协议
</code></pre>

<p>通常使用id数据类型来声明实现给定协议的实例变量。编译器会通过&lt;&gt;中的协议类型来确认协议的必须按方法是否在该对象上实现了。</p>

<h3 id="toc_4">非正式协议</h3>

<p>它是在Cocoa和Objective-C中的旧协议，通常是NSObject类的类别。</p>

<h3 id="toc_5">正式协议</h3>

<p>正式协议可以提供更好的类型安全。用@protocol关键字来声明。有@required和@optional关键字来保证必须实现的和可选的方法。</p>

<h3 id="toc_6">避免协议循环依赖</h3>

<p>协议在各自的声明中可以引用另一个协议。</p>

<pre><code>@protocol Foo
-(void)someMethodRequiringBar:(id&lt;Bar&gt;)inBar;
@end
</code></pre>

<p>如果Bar也需要Foo协议的话，就会导致协议之间的循环依赖，发生编译器错误。</p>

<pre><code>@protocol Bar
-(void)someMethodRequiringFoo:(id&lt;Foo&gt;)inFoo;
@end
</code></pre>

<p>解决方法，在Bar.h中加入@protocol Foo，告诉编译器Foo是一个协议，不用导入Foo.h。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的类别]]></title>
    <link href="http://ranchu90.github.io/14598725533534.html"/>
    <updated>2016-04-06T00:09:13+08:00</updated>
    <id>http://ranchu90.github.io/14598725533534.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>刚刚翻看了OC的书中关于类别的一章，现将OC中类别的使用和限制总结如下。</p>
</blockquote>

<h2 id="toc_0">定义及使用</h2>

<p>1.通过在类上声明和实现方法来扩展现有类的功能，且不需要访问要扩展类的原有代码。<br/>
2.类别不是子类，添加的方法可以直接在操作的类中使用，因此可以避免通过继承的方式添加某些方法的实现。<br/>
3.可以通过类别重写现有方法，但一般不推荐，这样会导致无法调用被扩展的类的初始方法，只能访问重写过的方法。</p>

<h3 id="toc_1">声明</h3>

<h4 id="toc_2">头文件</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;

@interface NSMutableString (GUID) //括号里为类别的名字

-(void) appendGUID;
+(id) stringWithGUID;
@end
</code></pre>

<h4 id="toc_3">实现</h4>

<pre><code>#import &quot;NSMutableString+GUID.h&quot;

@implementation NSMutableString (GUID)

-(void) appendGUID{
    CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
    NSString *string = (NSString *)CFBridgingRelease(CFUUIDCreateString(kCFAllocatorDefault, uuid));
    [self appendString:string];
   // CFRelease(uuid);
}

+(id) stringWithGUID{
    NSMutableString *string = [self string];
    [string appendGUID];
    return string;
}

@end
</code></pre>

<p>扩展成员方法：可访问类的所有成员变量、可以通过self调用类的其它方法、可以使用super关键字调用父类的方法。self关键字指实例对象。<br/>
扩展类方法：无法访问成员变量。self关键字指类对象。</p>

<h4 id="toc_4">使用</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &quot;NSMutableString+GUID.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSMutableString *str = [NSMutableString stringWithGUID];
        NSLog(@&quot;GUID=%@&quot;, str);
    }
    return 0;
}
</code></pre>

<h2 id="toc_5">限制</h2>

<p>1.类别不能在扩展类中添加任何成员变量。<br/>
2.重写现有方法时，无法调用原始现有对象方法。<br/>
3.若两个类别都定义了一个相同类的相同方法，运行时实际无法确定调用哪一个。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维数组作为参数在C语言函数中如何传递]]></title>
    <link href="http://ranchu90.github.io/14596175387256.html"/>
    <updated>2016-04-03T01:18:58+08:00</updated>
    <id>http://ranchu90.github.io/14596175387256.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>今天做了几道处理字符串的面试题，发现自己已经忘了二数组如何在C语言函数中作为参数传递。<br/>
现在把方法整理出来，以备能很快地回忆起来。</p>
</blockquote>

<pre><code>void printArray(int a[3][2]);
void printArray(int a[][2]);
void printArray(int (*a)[2]);
</code></pre>

<p>以上三种方式都可以将二维数组传入函数中，其中int a[][2]是int (*a)[2]的语法糖。</p>

<hr/>

<pre><code>#include&lt;stdio.h&gt;
void printArray(int a[][2]){
        for(int i=0; i&lt;3; ++i){
                for(int j=0; j&lt;2; ++j){
                        printf(&quot;%d\n&quot;, a[i][j]);
                }
        }
}
int main(){
        int test[][2] = {{8, 21}, {43, 54}, {89,23}};
        printArray(test);
        return 1;
}
</code></pre>

<hr/>

<p>手工寻址</p>

<pre><code>#include&lt;stdio.h&gt;
void printArray(int **a, int m, int n){
        for(int i=0; i&lt;m; ++i){
                for(int j=0; j&lt;n; ++j){
                        printf(&quot;%d\n&quot;, *((int*)a+i*n+j));
                }
        }
}
int main(){
        int test[][2] = {{8, 21}, {43, 54}, {89,23}};
        printArray((int**)test, 3, 2);
        return 1;
}
</code></pre>

<p><code>int **a;</code></p>

<p>*a表明a是一个指针，*(*a)表明a指针指向的内存单元(*a)的内容存放的也是一个指针。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First blog]]></title>
    <link href="http://ranchu90.github.io/14595804338386.html"/>
    <updated>2016-04-02T15:00:33+08:00</updated>
    <id>http://ranchu90.github.io/14595804338386.html</id>
    <content type="html"><![CDATA[
<p>今天由zjb同学介绍，学会了使用github搭建个人的blog。<br/>
从今天开始，我将在这个地方记录自己在技术上的成长。<br/>
我的目标是成为优秀的软件工程师。加油！</p>

]]></content>
  </entry>
  
</feed>
