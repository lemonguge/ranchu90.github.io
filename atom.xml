<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cd's blog]]></title>
  <link href="http://ranchu90.github.io/atom.xml" rel="self"/>
  <link href="http://ranchu90.github.io/"/>
  <updated>2016-05-30T02:05:07+08:00</updated>
  <id>http://ranchu90.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[iOS开发基础（二）]]></title>
    <link href="http://ranchu90.github.io/14648586354104.html"/>
    <updated>2016-06-02T17:10:35+08:00</updated>
    <id>http://ranchu90.github.io/14648586354104.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">ViewController</h2>

<p>作为连接视图View和模型Model的桥梁(控制器Controller)，从名字就可以看得出来，它是用来管理View的。除此之外，它还承担着传递数据，相应用户操作，内存管理，状态保持和适应设备的功能。</p>

<p>先来看看它的生存周期：<br/>
<img src="media/14648586354104/14648590059763.jpg" alt=""/><br/>
当一个viewController它管理的view出现或者消失的时候会引发相应的方法，如果有需求，可以在对应的方法里写代码来处理相应的事务。</p>

<p>默认状态下，Xcode会将与ViewController同名的Xib文件关联到对应的Controller上。如MyViewController关联到MyView.xib或者MyViewCon.xib。</p>

<p>除此之外也可以用代码来制定加载制定的xib：<br/>
<code><br/>
[UIViewController initWithNibName:@&quot;MyView&quot;];<br/>
</code></p>

<p>或者在IB中指定ViewController，如下：<br/>
<img src="media/14648586354104/14648600281167.jpg" alt=""/></p>

<h3 id="toc_1">跳转</h3>

<p>在viewcontroller中可以跳转到另一个viewcontoller：<br/>
<code><br/>
[self presentViewController: animated: completion:];<br/>
[self showViewController: sender:];<br/>
</code><br/>
撤销当前的view可以使用：<br/>
<code><br/>
[self dismissViewControllerAnimated: completion:];<br/>
</code></p>

<h3 id="toc_2">回传数据</h3>

<p>在其中可以设定回传数据或者在撤销当前view之后执行一段代码。completion是一个代码块block。<br/>
实际上是使用了观察者模式来通知第一个view，并将数据传给它。</p>

<pre><code>//在第二个view中，发送do发生变化的消息，并且将数据存在字典中回转给第一个view
[self dismissViewControllerAnimated:YES completion:^{
        NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;value1&quot;, @&quot;key1&quot;, @&quot;value2&quot;, @&quot;key2&quot;, nil];
        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;do&quot; object:self userInfo:dict];
    }];

//在第一个view中的viewDidLoad方法中
//注册观察者，如果do对象有变化就执行Test方法
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(Test:) name:@&quot;do&quot; object:nil];

- (void)Test:(id)sender{
    NSLog(@&quot;%@&quot;, sender);
}

</code></pre>

<p>执行结果：</p>

<pre><code>2016-06-02 17:52:33.594 NibVC[37096:5919151] NSConcreteNotification 0x7fd6495118e0 {name = do; object = &lt;SecondViewController: 0x7fd6494b82d0&gt;; userInfo = {
    key1 = value1;
    key2 = value2;
}

</code></pre>

<p>这种方法不仅可以用于viewController的回传值，还可以用于各个对象之间的消息传递，只需要注册观察者，和发送消息即可。</p>

<h2 id="toc_3">Storyboard</h2>

<p>Storyboard中文译为故事版，也就是做界面的地方，app的应用逻辑和导演讲故事是不是很像呢？在这之前，苹果使用的是xib文件来做的界面。storyboard的有点在于对多个view的管理比xib的要好。</p>

<p>大多数操作就是托控件到view上，如果要关联到.m文件中则要按住Ctrl键+上控件拖到对应的.m文件上即可选择是添加为属性IBOutlet还是方法IBAction。</p>

<h3 id="toc_4">场景的跳转</h3>

<p>Storyboard的场景跳转使用的是Segue，按下Ctrl拖住一个按钮到下一个场景上即可实现。<br/>
可以对Segue进行命名，以便在代码中使用Segue。<br/>
<code><br/>
[self performSegueWithIdentifier:@&quot;&quot; sender:sender];<br/>
</code><br/>
也可以在代码中显示Storyboard里的View Controller：<br/>
<code><br/>
id vc = [self.storyboard instantiateViewControllerWithIdentifier:@&quot;&quot;];<br/>
[self showViewController:vc sender:sender];<br/>
</code></p>

<h3 id="toc_5">返回</h3>

<p>在对应的vc中添加，再在Storyboard中将按钮的方法设置为以下方法。ForSegue可以改变为其它的名字。<br/>
```<br/>
- (void)unwindForSegue:(UIStoryboardSegue*)unwindSegue{</p>

<p>}<br/>
```</p>

<h2 id="toc_6">App的声明周期</h2>

<p><img src="media/14648586354104/14648697010376.jpg" alt=""/></p>

<p><img src="media/14648586354104/14648697197812.jpg" alt=""/></p>

<p><img src="media/14648586354104/14648697311911.jpg" alt=""/></p>

<h2 id="toc_7">Navigation Controller</h2>

<p>NavigationController是一种高效管理多个界面的工具，它可以提供在多个view之间方面地跳转。<br/>
<img src="media/14648586354104/14648707096843.jpg" alt=""/></p>

<p>每个被管理的ViewController自己提供：<br/>
内容，导航栏标题，导航栏上的自定义按钮，或者可选的工具栏按钮。</p>

<p>数据的传递可以通过Segue或者Delegate，Segue上面提到过，下面就列出使用Delegate的方法：<br/>
<code><br/>
- (void)navigationController: willShowViewController: animated:<br/>
- (void)nagivationController: didShowViewController: animated:<br/>
</code></p>

<p>代码中使用</p>

<pre><code>//创建
- initWithRootViewController:
- initWithNavigationBarClass:toolbarClass:
//跳转
- pushViewController:animated:
- popViewControllerAnimated:
- popToRootViewControllerAnimated:
- popToViewController:animated:
</code></pre>

<h2 id="toc_8">Tabbar Controller</h2>

<p><img src="media/14648586354104/14648725794206.jpg" alt=""/><br/>
TabbarController是另一种管理多个ViewController的方式。<br/>
使用方法和NavigationController非常相似。还可以和它结合起来一起使用。</p>

<p><img src="media/14648586354104/14648735896274.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发基础（一）]]></title>
    <link href="http://ranchu90.github.io/14645437888084.html"/>
    <updated>2016-05-30T01:43:08+08:00</updated>
    <id>http://ranchu90.github.io/14645437888084.html</id>
    <content type="html"><![CDATA[
<p>iOS的应用程序是运行在沙盒中的，也就是说各个应用无法访问除自己外的其它应用的地址。<br/>
接下来，我将对iOS开发中常用的组件NSButton，NSImage，NSLabel做一个总结。<br/>
Xcode提供了Interface Builder来方便快速地创建应用界面。<br/>
<img src="media/14645437888084/14645440555938.jpg" alt=""/><br/>
我们可以将想要的控件从这里拖到view上，完成添加。<br/>
通过Outlet插座，按住Ctrl+控件拖拽到对应的ViewController的.h文件中可以将IB中的组件添加到代码里，方便代码的操作。包括添加属性(IBOutlet)和相应方法(IBAction)。<br/>
<img src="media/14645437888084/14645442657409.jpg" alt=""/></p>

<h2 id="toc_0">通过代码添加控件</h2>

<p>把控件加入页面view[self.view addSubview:(UIView)]<br/>
    1   这个方法会retain一次view，并且设置它的下一个响应者是receiver，即它的新的父视图。<br/>
    2   每一个视图只能有唯一的一个父视图。如果当前操作视图已经有另外的一个父视图，则addsubview的操作会把它先从上一个父视图中移除（包括响应者链），再加到新的父视图上面。</p>

<h2 id="toc_1">UILabel</h2>

<pre><code>1   建立UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(x, y, width, height)]; 
2   
3   常用属性 //设置显示文字     
4   label.text = @&quot;label1&quot;;
5   //设置字体:粗体，正常的是 SystemFontOfSize     
6   label.font = [UIFont boldSystemFontOfSize:20];     
7   //设置文字颜色  
8   label.textColor = [UIColor orangeColor];   
9   //设置文字排版方式     
10  label.textAlignment = UITextAlignmentRight;     
11  label.textAlignment = UITextAlignmentCenter;     
12  //设置字体大小适应label宽度     
13  label.adjustsFontSizeToFitWidth = YES;
14  //设置label的显示行数  
15  label.numberOfLines = 2; 
16  //背景色，也可以设置背景图   
17  label.backgroundColor=[UIColor clearColor]; //可以去掉背景色   
18  //设置高亮     
19  label.highlighted = YES;     
20  label.highlightedTextColor = [UIColor orangeColor];     
21  //设置阴影     
22  label.shadowColor = [UIColor redColor];     
23  label.shadowOffset = CGSizeMake(1.0,1.0);     
24  //设置是否能与用户进行交互     
25  label.userInteractionEnabled = YES;     
26  //设置label中的文字是否可变，默认值是YES     
27  label.enabled = NO;     
28  //设置文字过长时的显示格式     
29  label.lineBreakMode = UILineBreakModeMiddleTruncation;//截去中间     
30  //  typedef enum {     
31  //      UILineBreakModeWordWrap = 0,     
32  //      UILineBreakModeCharacterWrap,     
33  //      UILineBreakModeClip,//截去多余部分     
34  //      UILineBreakModeHeadTruncation,//截去头部     
35  //      UILineBreakModeTailTruncation,//截去尾部     
36  //      UILineBreakModeMiddleTruncation,//截去中间     
37  //  } UILineBreakMode;     
38  
</code></pre>

<h2 id="toc_2">UIButton</h2>

<pre><code>1   建立 //UIButton的定义
2   UIButton *button=[[UIButton buttonWithType:(UIButtonType);
3   //typedef enum {
4   //  UIButtonTypeCustom = 0, 自定义风格
5   //  UIButtonTypeRoundedRect, 圆角矩形
6   //  UIButtonTypeDetailDisclosure, 蓝色小箭头按钮，主要做详细说明用
7   //  UIButtonTypeInfoLight, 亮色感叹号
8   //  UIButtonTypeInfoDark, 暗色感叹号
9   //  UIButtonTypeContactAdd, 十字加号按钮
10  //} UIButtonType;
11  
12  常用方法//设置frame
13  button.frame = CGRectMake(20, 20, 280, 40);
14  [button setFrame:CGRectMake(20,20,50,50)];
15  
16  //button背景色
17  button.backgroundColor = [UIColor clearColor];
18  [button setBackgroundColor:[UIColor blueColor]];
19  
20  //是否可点击，默认为YES
21  button.enable = NO;                          
22  //设置button填充图片和背景图片
23  [button setImage:(UIImage) forState:UIControlStateNormal];
24  [button setBackgroundImage:(UIImage)forState:UIControlStateNormal];
25  //设置button标题和标题颜色
26  [button1 setTitle:@&quot;点击&quot; forState:UIControlStateNormal];
27  [button setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
28  
29  //添加或删除事件处理
30  [button addTarget:self action:@selector(butClick:)forControlEvents:UIControlEventTouchUpInside];
31  [button removeTarget:nil action:nil forControlEvents:UIControlEventTouchUpInside];
32  
</code></pre>

<h2 id="toc_3">UIImageView</h2>

<pre><code>1   建立UIImageView *imageView = [[UIImageView alloc ] init];
2   //UIImage加载有两种方式
3   //方案1
4   UIImage *image = [UIImage imageNamed:@&quot;image_photo&quot;];
5   //方案2
6   NSString *filePath=[[NSBundle mainBundle] pathForResource:@&quot;image_photo&quot; ofType:@&quot;jpg&quot;];
7   UIImage *image=[UIImage imageWithContentsOfFile:filePath];
8   
9   imageView.image = image;
10   
</code></pre>

<p>方案一：用imageNamed的方式加载时，系统会把图像Cache到内存。如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存，而且释放图像的内存是一件相对来说比较麻烦的事情。例如：如果利用imageNamed的方式加载图像到一个动态数组NSMutableArray，然后将将数组赋予一个UIView的对象的animationImages进行逐帧动画，那么这将会很有可能造成内存泄露。并且释放图像所占据的内存也不会那么简单。但是利用imageNamed加载图像也有自己的优势。对于同一个图像系统只会把它Cache到内存一次，这对于图像的重复利用是非常有优势的。例如：你需要在一个TableView里重复加载同样一个图标，那么用imageNamed加载图像，系统会把那个图标Cache到内存，在Table里每次利用那个图像的时候，只会把图片指针指向同一块内存。这种情况使用imageNamed加载图像就会变得非常有效。方案二：就是每次单独加载图片，系统不缓存。使用完后记得释放。</p>

<pre><code>1   常用方法 //设置圆角
2   imageView.layer.masksToBounds = YES;
3   imageView.layer.cornerRadius = 10;
4   
5   //设置边框颜色和大小
6   imageView.layer.borderColor = [UIColor orangeColor].CGColor;
7   imageView.layer.borderWidth = 2;
8   
9   //播放一系列图片
10  UIImage *image1 = [UIImage imageNamed:@&quot;1&quot;];
11  UIImage *image2 = [UIImage imageNamed:@&quot;2&quot;];
12  UIImage *image3 = [UIImage imageNamed:@&quot;3&quot;];
13  NSArray *imagesArray = @[image1,image2,image3];
14  imageView.animationImages = imagesArray;
15  // 设定所有的图片在多少秒内播放完毕
16  imageView.animationDuration = [imagesArray count];
17  // 重复播放多少遍，0表示无数遍
18  imageView.animationRepeatCount = 0;
19  // 开始播放
20  [imageView startAnimating];
21  
22   //为图片添加单击事件：一定要先将userInteractionEnabled置为YES，这样才能响应单击事件
23  imageView.userInteractionEnabled = YES;
24  UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapImageView:)];
25  [imageView addGestureRecognizer:singleTap];
26  
27  //其他设置
28  imageView.hidden = YES或者NO;    // 隐藏或者显示图片
29  imageView.alpha =0.5;    // 设置透明度
30  // 设置高亮时显示的图片
31  imageView.highlightedImage = (UIImage *)hightlightedImage;
32  imageView.image = (UIImage *)image; // 设置正常显示的图片
</code></pre>

<h2 id="toc_4">UITextField</h2>

<pre><code>1   建立UITextField* textField = [[UITextField alloc] initWithFrame:CGRectMake(x, y, width, height)];
2   
3   常用方法textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型
4   textField.placeholder = @&quot;password&quot;; //默认显示的字 
5   textField.secureTextEntry = YES; //密码 
6   
7   textField.autocorrectionType = UITextAutocorrectionType; //设置是否自动纠错
8   typedef enum {
9       UITextAutocorrectionTypeDefault, //默认
10      UITextAutocorrectionTypeNo, 　//不自动纠错
11      UITextAutocorrectionTypeYes,　//自动纠错
12  }UITextAutocorrectionType;
13  
14  textField.clearButtonMode = UITextFieldViewMode; //编辑时会出现个修改X
15  typedef enum {
16      UITextFieldViewModeNever,　//重不出现
17      UITextFieldViewModeWhileEditing, //编辑时出现
18      UITextFieldViewModeUnlessEditing,　//除了编辑外都出现
19      UITextFieldViewModeAlways 　//一直出现
20  }UITextFieldViewMode; 
21  
22  //可以在UITextField使用下面方法，按return键返回
23  -(IBAction) textFieldDone:(id) sender
24  {
25   [textFieldName resignFirstResponder]; 
26  }
27  //链接TextField控件的&quot;Did end on exit&quot;
28  
29  //再次编辑就清空
30  textField.clearsOnBeginEditing = YES; 
31  
32  //设置键盘样式
33  textField.keyboardType = UIKeyboardType;
34  typedef enum {
35          UIKeyboardTypeDefault,     　//默认键盘，支持所有字符         
36          UIKeyboardTypeASCIICapable,　//支持ASCII的默认键盘
37          UIKeyboardTypeNumbersAndPunctuation,　//标准电话键盘，支持＋＊＃字符
38          UIKeyboardTypeURL,            //URL键盘，支持.com按钮 只支持URL字符
39          UIKeyboardTypeNumberPad,       //数字键盘
40          UIKeyboardTypePhonePad,　 　//电话键盘
41          UIKeyboardTypeNamePhonePad, 　//电话键盘，也支持输入人名
42          UIKeyboardTypeEmailAddress, 　//用于输入电子邮件地址的键盘     
43          UIKeyboardTypeDecimalPad,   　//数字键盘有数字和小数点
44          UIKeyboardTypeTwitter,      　//优化的键盘，方便输入@、#字符
45          UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable, 
46  }UIKeyboardType;
47  
48  //return键样式
49  text.returnKeyType =UIReturnKeyType;
50  typedef enum {
51      UIReturnKeyDefault, 默认 灰色按钮，标有Return
52      UIReturnKeyGo,    　标有Go的蓝色按钮
53      UIReturnKeyGoogle,标有Google的蓝色按钮，用语搜索
54      UIReturnKeyJoin,标有Join的蓝色按钮
55      UIReturnKeyNext,标有Next的蓝色按钮
56      UIReturnKeyRoute,标有Route的蓝色按钮
57      UIReturnKeySearch,标有Search的蓝色按钮
58      UIReturnKeySend,标有Send的蓝色按钮
59      UIReturnKeyYahoo,标有Yahoo的蓝色按钮
60      UIReturnKeyYahoo,标有Yahoo的蓝色按钮
61      UIReturnKeyEmergencyCall, 紧急呼叫按钮
62  } UIReturnKeyType;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C复习笔记(二)]]></title>
    <link href="http://ranchu90.github.io/14637124055346.html"/>
    <updated>2016-05-20T10:46:45+08:00</updated>
    <id>http://ranchu90.github.io/14637124055346.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">ARC机制</h2>

<p>以往的OBJC是通过程序员手动地管理对象的释放。ARC(Automatic Reference Counting)自动引用计数，现在是OBJC的默认内存管理机制，针对堆上的对象，由编译器自动生成操作引用计数的指令(retain,release)来管理对象的释放。</p>

<h3 id="toc_1">管理的对象</h3>

<table>
<thead>
<tr>
<th>受ARC管理</th>
<th>不受ARC管理</th>
</tr>
</thead>

<tbody>
<tr>
<td>OC对象指针</td>
<td>值类型(基本类型，struct)</td>
</tr>
<tr>
<td>Block指针</td>
<td>其他方式分配的资源(c语言的malloc)</td>
</tr>
<tr>
<td>使用_attribute_((NSObject))定义的typedef</td>
<td>非内存资源</td>
</tr>
</tbody>
</table>

<h3 id="toc_2">管理的方式</h3>

<pre><code>//新创建一个引用类型的对象，这个对象的引用计数初始为1；
NSString *name = [[NSString alloc] initWithString:@&quot;Mono&quot;];
//将对象引用赋值给其它变量或者常量，引用计数+1；
NSString *otherName = name;
//或者将将该对象引用赋值给其它对象的属性或实例变量，引用计数+1；
person.name = name;
//将对象传入函数参数，或者返回值，引用计数+1
print(name);//函数结束后，参数或者局部变量离开函数，该对象的引用计数-1；
//将对象加入集合之中，引用计数+1；
[array addObject];

//将变量或者常量,或者属性赋值为nil或者其他值，引用计数-1；
otherName = nil; or otherName = @&quot;Other Name&quot;;
person.name = nil;
//实例变量和属性所在的对象呗释放，该对象引用计数-1；
[person release];
//将对象从集合中移除的时候，该对象的引用计数-1；
[array removeObject:name];

//当该对象的引用计数变为0的时候，内存自动被释放。
</code></pre>

<h2 id="toc_3">自动释放池(Autorelease Pool)</h2>

<p>如果对象频繁的进行释放和分配，那么会造成琐碎的内存管理负担。autorelease可以讲release的调用延迟到自动释放池被释放时。</p>

<p>当自动释放池结束时，所有接受autorelease消息的对象都将被立即释放(对象被发送一条release消息);</p>

<p>AppKit和UIKit框架在处理每一次事件循环迭代时，都会讲其放入一个Autorelease Pool中，大多数情况无须程序员干预。</p>

<h3 id="toc_4">需要手动管理Autorelease Pool的情况</h3>

<p>1.当编写的程序不是基于UI框架，而是命令行程序时。<br/>
2.如果在循环中创建大量临时对象，需要更早地释放，避免临时对象聚集导致内存峰值过大。<br/>
3.在主线程之外创建新的线程，在新线程开始执行处，需要创建自己的Autorelease Pool。<br/>
4.嵌套使用Autorelease Pool的时候。</p>

<h2 id="toc_5">协议 Protocol</h2>

<p>类型的合同约定，只描述外部接口，不提供具体的实现。<br/>
协议中无法包含实例变量，但可以包含以下的成员：<br/>
属性 （本质上是访问器方法，编译器不会合成实例变量）<br/>
实例方法<br/>
类方法<br/>
初始化器，析构器(不常用)</p>

<h3 id="toc_6">使用协议</h3>

<p>1.一个类遵守协议，需实现该协议约定的所有@required的成员，即必须要实现的成员。<br/>
协议中的属性必须在实现类的.h接口文件中声明(编译器合成实例变量)<br/>
2.协议本质上是一种类型，可以作为声明类型，但是不能创建实例。<br/>
3.可以使用conformsToProtocl:检查是否实现了协议。<br/>
4.编译警告：1）未实现必选方法。2）协议类型变量被赋值为非协议类型变量。运行会出错。</p>

<h4 id="toc_7">协议的继承</h4>

<p>一个协议可以继承一个或者多个协议。<br/>
实现子协议的类型，同时也要实现父协议中必须是实现的成员。</p>

<h4 id="toc_8">协议的组合</h4>

<p>一个类可以同时实现多个协议，protocal<A,B,C....>来组合多个协议<br/>
实现组合协议的类型，必须实现组合协议中的每一个协议</p>

<h4 id="toc_9">协议中的可选</h4>

<p>协议中使用关键字@optional定义的成员是可以选择不必实现的。</p>

<h3 id="toc_10">常用的协议</h3>

<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>NSObject</td>
<td>包含对象的常用操作，相等、字符串表示、哈希。</td>
</tr>
<tr>
<td>NSCopying</td>
<td>支持复制的类型必须遵守该协议。</td>
</tr>
<tr>
<td>NSMutableCopying</td>
<td>在NSCopying协议的基础上，支持复制数据的可变性。</td>
</tr>
<tr>
<td>NSFastEnumeration</td>
<td>实现快速枚举for-in的类型采用</td>
</tr>
<tr>
<td>NSCoding</td>
<td>支持将对象图进行编码或解码以支持对象的序列化</td>
</tr>
</tbody>
</table>

<h2 id="toc_11">类别 Categroy</h2>

<p>在没有源代码的情况下，基于某些场合的需要，为一个类增加功能。<br/>
可增加 | 不可增加<br/>
--------- | -------------<br/>
类方法 | 属性<br/>
实例方法| 实例变量<br/>
重写父类方法 | 已存在的同名方法</p>

<h3 id="toc_12">命名规范</h3>

<p>文件名：类名+扩展方法，如：Person+Sport.h/m</p>

<h3 id="toc_13">类别的使用</h3>

<h4 id="toc_14">场景</h4>

<p>1.适合在没有源代码的情况下，想已经封装的类中添加方法。<br/>
2.为一个类在某些特殊场景下增加功能。<br/>
3.对于复杂的大型文件分割实现。<br/>
4.可以通过类别重写现有方法，但一般不推荐，这样会导致无法调用被扩展的类的初始方法，只能访问重写过的方法。</p>

<h4 id="toc_15">添加类别的对象</h4>

<p>1.自己创建的类。<br/>
2.系统的类。<br/>
3.第三方库。</p>

<h4 id="toc_16">类别限制</h4>

<p>1.类别不能在扩展类中添加任何成员变量。<br/>
2.重写现有方法时，无法调用原始现有对象方法。<br/>
3.若两个类别都定义了一个相同类的相同方法，运行时实际无法确定调用哪一个。</p>

<h2 id="toc_17">扩展 Extension</h2>

<p>扩展支持在编译时，在有类的源代码的前提下，向类添加功能。可看做是匿名的类别。</p>

<p>接口在.m文件中的@implementation前声明，实现代码在@implementation 内实现。</p>

<p>扩展支持添加以下成员：<br/>
1.属性。<br/>
2.实例成员。<br/>
3.类方法。<br/>
4.实例方法。<br/>
5.改写属性的读写属性。</p>

<h3 id="toc_18">扩展的使用</h3>

<p>扩展实现的成员只能在。m文件内部访问，类外无法直接往访问。</p>

<p>扩展的主要用途在于信息隐藏，隐藏一些外部无须访问、而内部实现又需要使用的属性、方法：<br/>
1.类的主要接口用于“对类以外公开”<br/>
2.类的扩展接口用于“对类内可见”</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C复习笔记]]></title>
    <link href="http://ranchu90.github.io/14632363806380.html"/>
    <updated>2016-05-14T22:33:00+08:00</updated>
    <id>http://ranchu90.github.io/14632363806380.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Objective-C简介</h2>

<p>Objective-C简称Objc或者OC，是一种基于C语言的面向对象程序设计语言。1980年代产生，主要在苹果电脑平台上使用，开发Cocoa或Cocoa Touch应用程序。<br/>
通过LLVM编译器架构，可以苹果家最新的编程语言Swift进行双向操作。不过终有一天将会被Swift取代。</p>

<h3 id="toc_1">开发方式</h3>

<h4 id="toc_2">命令行</h4>

<p>clang -fobj-arc *.m<br/>
-fobj-arc表示支持ARC内存管理<br/>
适合研究、调试、学习</p>

<h4 id="toc_3">IDE</h4>

<p>通过Xcode构建正规工程项目<br/>
有利于构建高质量的代码组织</p>

<h2 id="toc_4">类与对象</h2>

<p>在OC中所有的类都是引用类型，所有c语言中的基本数值类型都是值类型。此外，详细的类型说明如下表所示：</p>

<table>
<thead>
<tr>
<th>引用类型(reference)</th>
<th>值类型(value type)</th>
<th>类型装饰</th>
</tr>
</thead>

<tbody>
<tr>
<td>类 class</td>
<td>基础数值类型</td>
<td>协议 protocol</td>
</tr>
<tr>
<td>指针 pointer</td>
<td>结构 struct</td>
<td>类别 category</td>
</tr>
<tr>
<td>快 block</td>
<td>枚举 enum</td>
<td>扩展 extension</td>
</tr>
</tbody>
</table>

<h3 id="toc_5">类与结构体的区别</h3>

<table>
<thead>
<tr>
<th></th>
<th>类 class</th>
<th>结构 struct</th>
</tr>
</thead>

<tbody>
<tr>
<td>实例</td>
<td>对象</td>
<td>值</td>
</tr>
<tr>
<td>类型</td>
<td>引用类型(栈：指针，堆：实体对象)</td>
<td>实例直接存在在栈中</td>
</tr>
</tbody>
</table>

<h3 id="toc_6">栈和堆的区别</h3>

<table>
<thead>
<tr>
<th></th>
<th>栈 stack</th>
<th>堆 heap</th>
</tr>
</thead>

<tbody>
<tr>
<td>存储类容</td>
<td>值类型</td>
<td>引用类型的对象</td>
</tr>
<tr>
<td>管理方式</td>
<td>由系统自动管理，函数为单位</td>
<td>分配由程序员手动请求</td>
</tr>
<tr>
<td>具体</td>
<td>空间大小编译时确定(参数+全局变量)</td>
<td>释放由运行时ARC机制自动释放(确定是)</td>
</tr>
<tr>
<td>具体</td>
<td>函数执行时，系统自动分配stack</td>
<td></td>
</tr>
<tr>
<td>具体</td>
<td>函数结束后，系统立即自动回收stack</td>
<td></td>
</tr>
<tr>
<td>传递方式</td>
<td>函数间直接通过拷贝值传递</td>
<td>函数间通过拷贝引用(指针)传递</td>
</tr>
<tr>
<td>限制</td>
<td>有局部性，大小有限额，超出stack overflow</td>
<td>有全局性，无大小限制(受制系统内存大小)</td>
</tr>
</tbody>
</table>

<h2 id="toc_7">属性与实例变量</h2>

<p>数据成员描述对象的状态：1.实例变量instance variable。2.属性property。</p>

<h3 id="toc_8">属性</h3>

<p>属性描述的是对象的状态，是对外的接口(相当于是public)。<br/>
声明一个属性的同时，编译器会自动为这个属性生成：<br/>
1.getter访问器方法: properyName<br/>
2.setter访问器方法: setProperyName<br/>
3.一个对应的实例变量: _propery</p>

<p>访问器方法可以自定义。访问器方法名也可以修改。对应的实例变量名也可以修改。但是一般使用编译器默认生成的，以便统一规范。</p>

<p>使用静态全局变量(c语言)+类方法，可以模拟类属性。</p>

<h3 id="toc_9">实例变量</h3>

<p>可在不声明属性的情况下定义实例变量。只有实例变量，无类变量。<br/>
若单独自定义了访问器方法，则编译器就不在合成实例变量。<br/>
类外使用属性来访问，类内一般也是用属性访问即self.<br/>
以下情况例外：<br/>
初始化器 init<br/>
析构器 dealloc<br/>
自定义访问器方法中</p>

<p>生存周期<br/>
实例变量存储在堆上。<br/>
值类型实例变量内嵌在对象实例中，随着对象实例释放。<br/>
引用类型的实例变量通过指针引用堆上的实例，ARC对引用进行计数管理，自动施放。</p>

<p>属性的描述特性<br/>
Attribute可指定属性的不同功能。</p>

<p>读写： readwrite(默认)，readonly<br/>
多线程： atomic(默认)， nonatomic</p>

<p>内存管理特性<br/>
ARC下：<br/>
strong(默认), weak(阻止循环引用), copy(创建独立拷贝)<br/>
MRC下：<br/>
retain<br/>
assign<br/>
unsafe_unretained</p>

<h2 id="toc_10">方法</h2>

<p>函数成员描述对象的行为：1.方法method。2.初始化器init。3.析构器dealloc。</p>

<p>函数指的是代码段上可执行指令序列，OC中称为方法。<br/>
所有的方法默认都是公有的，没有private和protected。<br/>
方法调用通过运行时动态消息分发实现，OC中称为向对象发送消息。</p>

<h3 id="toc_11">方法的类型</h3>

<p>实例方法，可访问：<br/>
实例成员。<br/>
类型方法、静态变量。</p>

<p>类方法<br/>
可访问：类型方法、静态变量<br/>
无法访问实例成员。</p>

<h3 id="toc_12">方法的参数</h3>

<p>参数为值类型，则为值传递方式；为引用类型，则为指针传递；<br/>
方法可以无参数和返回值。</p>

<h2 id="toc_13">初始化器和析构器</h2>

<p>初始化器用于初始化对象实例或类型：<br/>
对象初始化：-(id) init 可以重载多个<br/>
alloc：1.在堆上分配合适大小内存。2.将属性或实例变量的内存置0。<br/>
init：1.调用父类初始化器[super init]。2.初始化当前对象实例变量。<br/>
new相当于alloc/init的无参数版本。<br/>
类型初始化：+(void) initialize 只能一个<br/>
负责类型级别初始化。<br/>
每个类使用前被系统自动调用，每个进程周期只调用一次。<br/>
子类调用父类的initialize方法。</p>

<p>析构器用于释放对象的资源，无返回值。<br/>
只能一个。<br/>
无类型析构器。</p>

<p>自动：ARC将对象属性引用计数减持。<br/>
手动：1.释放不受ARC管理的动态内存，如malloc。<br/>
     2.关闭非内存资源，如文件句柄，网络资源。</p>

<p>dealloc由ARC自动在释放对象内存前调用，无法手工调用。<br/>
子类dealloc会自动调用父类的dealloc(后置调用)。</p>

<h2 id="toc_14">继承与多态</h2>

<p>继承的含义：<br/>
成员复用：子类复用父类成员<br/>
类型抽象：将子类当做父类使用(IS-A关系准则)</p>

<p>多态：<br/>
子类在父类统一行为接口下，表现不同的实现方式。</p>

<p>OC不支持重载，子类只能重写与父类同名同参数方法。</p>

<p>子类中通过super调用父类实现。<br/>
self具有多态性，可以指向不同的子类。<br/>
super无多态性，仅指向当前父类。</p>

<h3 id="toc_15">init和dealloc的继承</h3>

<p>init：<br/>
子类自动继承父类的初始化器。<br/>
子类也可以重写父类的初始化器，此时子类初始化器必须先调用父类的一个初始化器。</p>

<p>dealloc：<br/>
子类可以选择继承父类析构器或者重写父类析构器。<br/>
子类析构器执行完后会自动调用父类的析构器（后置调用，且不支持手工调用）。<br/>
子类析构器自动具有多态性。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的协议]]></title>
    <link href="http://ranchu90.github.io/14609059782704.html"/>
    <updated>2016-04-17T23:12:58+08:00</updated>
    <id>http://ranchu90.github.io/14609059782704.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一.问题的产生</h2>

<p><img src="media/14609059782704/14609061125330.jpg" alt=""/><br/>
NetworkConnector类提供所有和网络服务器的交互，包括连接、断开连接和手法数据。BusinessLogic类会接收NetworkConnector收到的数据，并确定它的走向。<br/>
网络连接是一个在其他应用或同一个应用的其他地方一定会复用的东西。所以必须将它与BusinessLogic类设计成没有紧密耦合。<br/>
<img src="media/14609059782704/14609063607549.jpg" alt=""/><br/>
C++等语言使用多继承来解决这类问题，强制BusinessLogic类继承自NetworkConnector可以依赖的类。但是多继承会产生新的问题，即砖石问题。如果D类同时继承自B类和C类，同时B、C也继承自共同的超类A，这种情况下，如果D没有重写A中的方法，当D调用A类的方法的时候，无法确定会调用哪一个父类的方法B类的还是C类的？<br/>
Objective-C只能使用单继承。 </p>

<h2 id="toc_1">二.Objective-C的解决方案</h2>

<p>Objective-C使用协议来声明一个接口来解决这个问题。<br/>
接口是在不提供默认实现时由一个类来具体实现，它只提供声明这些方法的接口机制，让可复用组件不依赖于特定的类来实现，而依赖于以协议形式存在的接口。</p>

<h3 id="toc_2">协议的声明</h3>

<pre><code>@protocol NetworkClient
@required
-(void) networkConnector:(NetworkConnector *) in gotData:(NSData *) data;
@optional
-(void) networkConnectorDisconnected:(NetworkConnector *) in;
@end

</code></pre>

<p>@required关键字表明其后的方法是该协议必须实现的方法。<br/>
@optional关键字表明其后的方法是实现类可以选择性实现的方法。<br/>
同时，协议不能有成员变量。</p>

<h3 id="toc_3">声明一个必须实现协议的对象</h3>

<pre><code>id&lt;NerworkClient&gt; *delegate; //&lt;&gt;中是该对象必须实现的协议
</code></pre>

<p>通常使用id数据类型来声明实现给定协议的实例变量。编译器会通过&lt;&gt;中的协议类型来确认协议的必须按方法是否在该对象上实现了。</p>

<h3 id="toc_4">非正式协议</h3>

<p>它是在Cocoa和Objective-C中的旧协议，通常是NSObject类的类别。</p>

<h3 id="toc_5">正式协议</h3>

<p>正式协议可以提供更好的类型安全。用@protocol关键字来声明。有@required和@optional关键字来保证必须实现的和可选的方法。</p>

<h3 id="toc_6">避免协议循环依赖</h3>

<p>协议在各自的声明中可以引用另一个协议。</p>

<pre><code>@protocol Foo
-(void)someMethodRequiringBar:(id&lt;Bar&gt;)inBar;
@end
</code></pre>

<p>如果Bar也需要Foo协议的话，就会导致协议之间的循环依赖，发生编译器错误。</p>

<pre><code>@protocol Bar
-(void)someMethodRequiringFoo:(id&lt;Foo&gt;)inFoo;
@end
</code></pre>

<p>解决方法，在Bar.h中加入@protocol Foo，告诉编译器Foo是一个协议，不用导入Foo.h。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的类别]]></title>
    <link href="http://ranchu90.github.io/14598725533534.html"/>
    <updated>2016-04-06T00:09:13+08:00</updated>
    <id>http://ranchu90.github.io/14598725533534.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>刚刚翻看了OC的书中关于类别的一章，现将OC中类别的使用和限制总结如下。</p>
</blockquote>

<h2 id="toc_0">定义及使用</h2>

<p>1.通过在类上声明和实现方法来扩展现有类的功能，且不需要访问要扩展类的原有代码。<br/>
2.类别不是子类，添加的方法可以直接在操作的类中使用，因此可以避免通过继承的方式添加某些方法的实现。<br/>
3.可以通过类别重写现有方法，但一般不推荐，这样会导致无法调用被扩展的类的初始方法，只能访问重写过的方法。</p>

<h3 id="toc_1">声明</h3>

<h4 id="toc_2">头文件</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;

@interface NSMutableString (GUID) //括号里为类别的名字

-(void) appendGUID;
+(id) stringWithGUID;
@end
</code></pre>

<h4 id="toc_3">实现</h4>

<pre><code>#import &quot;NSMutableString+GUID.h&quot;

@implementation NSMutableString (GUID)

-(void) appendGUID{
    CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
    NSString *string = (NSString *)CFBridgingRelease(CFUUIDCreateString(kCFAllocatorDefault, uuid));
    [self appendString:string];
   // CFRelease(uuid);
}

+(id) stringWithGUID{
    NSMutableString *string = [self string];
    [string appendGUID];
    return string;
}

@end
</code></pre>

<p>扩展成员方法：可访问类的所有成员变量、可以通过self调用类的其它方法、可以使用super关键字调用父类的方法。self关键字指实例对象。<br/>
扩展类方法：无法访问成员变量。self关键字指类对象。</p>

<h4 id="toc_4">使用</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &quot;NSMutableString+GUID.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSMutableString *str = [NSMutableString stringWithGUID];
        NSLog(@&quot;GUID=%@&quot;, str);
    }
    return 0;
}
</code></pre>

<h2 id="toc_5">限制</h2>

<p>1.类别不能在扩展类中添加任何成员变量。<br/>
2.重写现有方法时，无法调用原始现有对象方法。<br/>
3.若两个类别都定义了一个相同类的相同方法，运行时实际无法确定调用哪一个。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维数组作为参数在C语言函数中如何传递]]></title>
    <link href="http://ranchu90.github.io/14596175387256.html"/>
    <updated>2016-04-03T01:18:58+08:00</updated>
    <id>http://ranchu90.github.io/14596175387256.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>今天做了几道处理字符串的面试题，发现自己已经忘了二数组如何在C语言函数中作为参数传递。<br/>
现在把方法整理出来，以备能很快地回忆起来。</p>
</blockquote>

<pre><code>void printArray(int a[3][2]);
void printArray(int a[][2]);
void printArray(int (*a)[2]);
</code></pre>

<p>以上三种方式都可以将二维数组传入函数中，其中int a[][2]是int (*a)[2]的语法糖。</p>

<hr/>

<pre><code>#include&lt;stdio.h&gt;
void printArray(int a[][2]){
        for(int i=0; i&lt;3; ++i){
                for(int j=0; j&lt;2; ++j){
                        printf(&quot;%d\n&quot;, a[i][j]);
                }
        }
}
int main(){
        int test[][2] = {{8, 21}, {43, 54}, {89,23}};
        printArray(test);
        return 1;
}
</code></pre>

<hr/>

<p>手工寻址</p>

<pre><code>#include&lt;stdio.h&gt;
void printArray(int **a, int m, int n){
        for(int i=0; i&lt;m; ++i){
                for(int j=0; j&lt;n; ++j){
                        printf(&quot;%d\n&quot;, *((int*)a+i*n+j));
                }
        }
}
int main(){
        int test[][2] = {{8, 21}, {43, 54}, {89,23}};
        printArray((int**)test, 3, 2);
        return 1;
}
</code></pre>

<p><code>int **a;</code></p>

<p>*a表明a是一个指针，*(*a)表明a指针指向的内存单元(*a)的内容存放的也是一个指针。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First blog]]></title>
    <link href="http://ranchu90.github.io/14595804338386.html"/>
    <updated>2016-04-02T15:00:33+08:00</updated>
    <id>http://ranchu90.github.io/14595804338386.html</id>
    <content type="html"><![CDATA[
<p>今天由zjb同学介绍，学会了使用github搭建个人的blog。<br/>
从今天开始，我将在这个地方记录自己在技术上的成长。<br/>
我的目标是成为优秀的软件工程师。加油！</p>

]]></content>
  </entry>
  
</feed>
